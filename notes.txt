Discard rows with no dep_time, arr_time, crs dep and arr time, dep delay, arr delay

Delays sum up to arrival delay - yes

FLIGHTS always 1

28329565 cases where arrival delay is known but reason isn't, 6590120 where both are known.
Every time delay reasons are know, they correctly sum up to arrival delay


Average yearly delay:
2012 3.108298798608179
2013 5.906902633526557
2014 7.149986313988547
2015 4.32748223559089
2016 3.469477494001949


Total carriers: 17
Carrier: OO, flights: 3051431, avg delay: 5.329306807199639
Carrier: WN, flights: 6007171, avg delay: 5.541622171235012
Carrier: UA, flights: 2591361, avg delay: 4.4786210798109565
Carrier: 9E, flights: 296701, avg delay: 2.9045908170178056
Carrier: YV, flights: 274898, avg delay: 4.686123580382542
Carrier: FL, flights: 471609, avg delay: 2.3306913142030794
Carrier: HA, flights: 374188, avg delay: 0.5453969662308786
Carrier: F9, flights: 426298, avg delay: 10.646238077588917
Carrier: US, flights: 1430016, avg delay: 1.8437472028284998
Carrier: AS, flights: 812370, avg delay: -1.2839494319091054
Carrier: EV, flights: 3238539, avg delay: 8.176550290115388
Carrier: B6, flights: 1270047, avg delay: 7.045682561354028
Carrier: DL, flights: 4080551, avg delay: 0.5877912076089724
Carrier: NK, flights: 255578, avg delay: 11.463502335881806
Carrier: AA, flights: 3241287, avg delay: 5.496560471195547
Carrier: VX, flights: 300409, avg delay: 5.344690072534445
Carrier: MQ, flights: 1600338, avg delay: 7.459409199806541

Month: 1, avg delay: 4.393660977865197
Month: 2, avg delay: 3.9291789849133596
Month: 3, avg delay: 4.136464657034468
Month: 4, avg delay: 3.0655854161854226
Month: 5, avg delay: 4.312400155111075
Month: 6, avg delay: 9.188938783044623
Month: 7, avg delay: 9.09501771829545
Month: 8, avg delay: 6.283240104912506
Month: 9, avg delay: 1.6070121213997468
Month: 10, avg delay: 1.8252095664693648
Month: 11, avg delay: 0.9318465973040123
Month: 12, avg delay: 8.075578208629096

Day: 1 (Mo), avg delay: 5.669010779440647
Day: 2, avg delay: 3.8696323318153283
Day: 3, avg delay: 4.243740143957588
Day: 4, avg delay: 6.497175889243529
Day: 5, avg delay: 6.267041156046281
Day: 6, avg delay: 2.2393941653234397
Day: 7, avg delay: 4.313667499195137


Correlations:
weather with carrier: -0.0448431914794342
nas with carrier: -0.1156669873379839
nas with weather: -0.0020508095401930086
security with carrier: -0.011217137022724706
security with weather: -0.004145286466907141
security with nas: -0.009862425374733075
late with carrier: -0.10843666850704484
late with weather: -0.022195036737729674
late with nas: -0.1498760536935674
late with security: -0.009654901611893954

Size of data:
34919683 samples
24443779 training (70 %)
5237952 validation (15 %)
5237952 testing (15 %)

Shuffled data by performing k-way split, shuffling each part separately and randomly merging (too large for a direct shuffle).

Inputted 0 for missing values in all 5 delay types.


Making time variables categorical vs transforming them into a smooth variable doesn't seem to have an impact on performance.


Optimizing preprocessing:

230 def preprocess(row, features, yIndex):
	# SECTION 1 START
233     for feat in FLOAT_FEATURES:
234         row[feat] = float(row[feat])
235     for feat in INT_FEATURES:
236         row[feat] = int(float(row[feat]))
237     row[CRS_DEP_TIME] = int(int(row[CRS_DEP_TIME]) / 100) #extract hours
238     row[CRS_ARR_TIME] = int(int(row[CRS_ARR_TIME]) / 100)
239     for feat in CATEG_VARS:
240         #map categorical features so that they are in [0, number of values)
241         row[feat] = CATEG_VARS[feat][row[feat]]

	#SECTION 2 START
244     featRow = []
245     nValues = []
246     for feat in features:
247         #print ("Processing feature ", feat)
248         if feat in TIME_VARS:
249             #print ("Time variable")
250             a, b = convertTimeVariable(row[feat], TIME_VARS[feat])
251             featRow.append(a)
252             featRow.append(b)
253             nValues.append(0)
254             nValues.append(0)
255         elif feat in CATEG_VARS:
256             nValues.append(len(CATEG_VARS[feat].keys()))
257             featRow.append(row[feat])
258             #print ("Categorical variable, n values: ", nValues[-1])
259         else:
260             #print ("Numerical variable")
261             nValues.append(0)
262             featRow.append(row[feat])
263 
	#SECTION 3 START
266     #print ("Performing one hot encoding")
267     #print ("Number of features:", len(nValues))
268     #print ("N values", nValues)
269     enc = MyOneHotEncoder(nValues=nValues) #make property variable
270     featRow = enc.transform(featRow)
271     y = row[yIndex]
274     return featRow, y, row

CPU time:
Section 1: 43%
Section 2: 20%
Section 3: 37%




